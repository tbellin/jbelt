<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets">

<ui:composition>
	<p>The Richfaces Drag-n-Drop component suite includes three
	components: <b>dragSource</b>, <b>dropTarget </b>and <b>dragIndicator</b>.</p>

	<p>That demo shows most important feature of the RichFaces drag and
	drop mechanism. You could mark several different components as
	'draggable' and define different drag <b>type</b>'s for them via
	attribute. Then you could add corresponding drop zones and use <b>acceptType</b>'s
	attributes to define which drop zone will process corresponding dragged
	elements.</p>

	<ui:include src="#{demoNavigator.sampleIncludeURI}" />
	<ui:include src="/templates/includes/source-view.xhtml">
		<ui:param name="src" value="#{demoNavigator.sampleIncludeURI}" />
		<ui:param name="sourceType" value="xhtml" />
		<ui:param name="openLabel" value="View Source" />
		<ui:param name="hideLabel" value="Hide Source" />
	</ui:include>

	<p><b>rich:dragSource </b>is used to point to the JSF component
	that becomes draggable. If you want to add a draggable feature to the
	existing component, attach dragSupport as a child component to it.</p>

	<p><b>rich:dropSupport </b>is similar to the dragSupport, but it's
	used to define the drog zone. dropSupport has a built-in Ajax support.
	I.e. it allows to send an Ajax request and re-render the specified area
	on a page when the Ajax response is returned back. With the <b>dropListener
	</b>attribute you can point to a method of the backing bean that accepts <b>
	DropEvent </b>as a parameter. This event contains information provided by <b>
	dropValue </b>and <b>dragValue </b>attributes of dropSupport and
	dragSupport.</p>

	<p><b>rich:dragIndicator</b> is a special visual representation of
	a dragged object. By default if the component not defined we create a
	copy of dragged elements. But the markup could be redefined by defining
	the markup of the indicator using nested components.</p>
	<fieldset><legend>Note:</legend> That sample shows simple
	usage without indicator defined. We just using predefined CSS classes
	to customize look for different states.</fieldset>
	<p>Note: The parent component for dragSupport and dropSupport
	should be designed to render its children and has two attribute
	"onmouseover" and "onmouseout". You can use &lt;a4j:outputPanel&gt; as
	a container if the component is not satisfy this requirements. Use
	&lt;a4j:outputPanel&gt; layout="block" to wrap the component with a
	block type layout.</p>

	<p>The following example demonstrates the drag-n-drop functionality
	on practice. The left list contains the examples of Ajax frameworks. Do
	you know them? The demo helps you to sort them out. Drag one and drag
	over the headers of three panels. If the draggable framework is
	suitable for a certain framework family, it will be accepted and moved
	from source panel to the target list.</p>
</ui:composition>
</html>